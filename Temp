
# def scan_api(data):
#     if not isinstance(data, dict):
#         raise CustomException("Input data must be a dictionary", HTTPStatus.BAD_REQUEST)
#
#     base_url = data.get("base_url")
#     project_id = data.get("project_id")
#
#     if base_url is None:
#         raise CustomException("base_url cannot be None", HTTPStatus.BAD_REQUEST)
#     if project_id is None:
#         raise CustomException("project_id cannot be None", HTTPStatus.BAD_REQUEST)
#
#     project = get_project_by_project_id(project_id)
#     if project is None or str(project.company_id) != str(g.company_id):
#         raise CustomException("project_id is invalid or not accessible", HTTPStatus.BAD_REQUEST)
#
#     payload_models = get_all_payload()
#     payloads = [payload.payload_content for payload in payload_models]
#
#     topic_ids = get_topic_ids_by_project_id(project_id)
#     apis = []
#     for topic_id in topic_ids:
#         apis.extend(get_apis_by_topic_id(topic_id))
#
#     responses = []
#     suspicious = []
#
#     for api in apis:
#         format_api = json.loads(api.format_api)
#
#         try:
#             datas_success = make_datas_payload_success(format_api)
#             responses_success = []
#             print(len(datas_success))
#             for data in datas_success:
#                 final_endpoint_success, body_request_success = build_api_request(data, api.endpoint, format_api)
#                 rs = send_attack_request(api.api_type, base_url, final_endpoint_success, body_request_success)
#                 responses_success.append(rs)
#
#             for payload in payloads:
#                 datas_vul = make_datas_payload_vul(payload, format_api)
#                 final_endpoint_vul, body_request_vul = build_api_request(datas_vul, api.endpoint, format_api)
#                 response_vul = send_attack_request(api.api_type, base_url, final_endpoint_vul, body_request_vul)
#
#                 if is_suspicious_response(responses_success, response_vul):
#                     suspicious.append(response_vul)
#                 else:
#                     responses.append(response_vul)
#
#         except Exception as e:
#             print(f"Error processing API {api.endpoint}: {str(e)}")
#             continue
#
#     return {
#         "status": "SUCCESS",
#         "data": {
#             "total_apis_scanned": len(apis),
#             "suspicious_responses": len(suspicious),
#             "normal_responses": len(responses),
#             "suspicious_details": suspicious
#         },
#         "message": "Scan completed successfully"
#     }
